<title>SAF Developer Notes</SAF>
<b>Incomplete / Outdated </b>
<h1>Custom SAF processing</h1>
SAFEntry: use to store request/data/object that will be processed by SAF.
SAF: key class in SAF system. use to define how to process a request. If you want to customize your own SAF, you will need to create a sub-class of SAF and override its submit method.
SAFManager: manage all SAF requests and invoke SAF process.

<h2>How to create your own SAF</h2>
<ol>
  <li>Creating sub-class of foam.core.saf.SAF, and override submit method for thing you want to implement.</li>
  <li>Registering it into storeAndForwards.jrl</li>
  <li>Using SAFManager nspec service to get SF that you define in storeAndForwards.jrl[code: ((SAFManager) x.get("safManager")).getSafs().get("input SAF id");]</li>
</ol>

<h3>Example: </h3>
SAFSink.js: example for how to create a SAF.
constFourSecondHttpSinkDemoUsingAtime in storeAndForwards.jrl: example for how to register SAF.

<p><b>TODO</b>: remove references to Medusa</p>
<h1>SAF in Medusa</h1>
The SAF system is built into the Medusa system by default.
In the medusa, SAF is being use to broadcast data from one mediator to others.
DAOs can be set to use SAF to directly broadcast data from mediator itself instead of going to Medusa node.
Important: SAF do not guerantee consistency for the data. If you use SAF for a DAO, please make sure that the data is less important.

<h2>Key Classes</h2>
<ul>
<li>foam.core.medusa.sf.MedusaSAFManager</li>
<li>foam.core.medusa.sf.SAFBroadcastDAO</li>
<li>foam.core.medusa.sf.SAFBroadcastReceiverDAO</li>
</ul>

<h2>How it works</h2>
To use SAF simply enabled it in via EasyDAO.
TOOD: remainder of configation
- internal sessions
- users #2
- ports

<h3>Example: </h3>
in service.jrl
p({
  "class":"foam.core.boot.CSpec",
  "name":"localEmailMessageDAO",
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.core.notification.email.EmailMessage.getOwnClassInfo())
      .setAuthorize(false)
      .setFuid(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)  //Set journalType for persistence
      .setJournalName("emailMessages")
      .setSaf(true)                                         //Turn on SAF
      .setServiceProviderAware(false)
      .setFixedSize(new foam.dao.FixedSizeDAO.Builder(x)
        .setComparator(foam.mlang.MLang.DESC(foam.core.notification.email.EmailMessage.CREATED) )
        .setSize(100000)
        .build())
      .build()
      .addPropertyIndex(new foam.lang.PropertyInfo[] {foam.core.notification.email.EmailMessage.CREATED});
  """
})
